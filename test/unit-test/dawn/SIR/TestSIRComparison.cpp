//===--------------------------------------------------------------------------------*- C++ -*-===//
//                          _
//                         | |
//                       __| | __ ___      ___ ___
//                      / _` |/ _` \ \ /\ / / '_  |
//                     | (_| | (_| |\ V  V /| | | |
//                      \__,_|\__,_| \_/\_/ |_| |_| - Compiler Toolchain
//
//
//  This file is distributed under the MIT License (MIT).
//  See LICENSE.txt for details.
//
//===------------------------------------------------------------------------------------------===//

#include "dawn/SIR/AST.h"
#include "dawn/SIR/ASTUtil.h"
#include "dawn/SIR/SIR.h"
#include "dawn/Support/Casting.h"
#include "dawn/Support/STLExtras.h"
#include "llvm/ADT/STLExtras.h"
#include <gtest/gtest.h>
#include <iostream>

using namespace dawn;

namespace {

TEST(SIRComparisonTest, Dummy) {
  /// Works all the time, initializing the suite
  /// checks that no exceptions are thrown with empty SIRs
  std::unique_ptr<dawn::SIR> test01SIR = llvm::make_unique<dawn::SIR>();
  std::unique_ptr<dawn::SIR> test02SIR = llvm::make_unique<dawn::SIR>();
  EXPECT_TRUE(*test01SIR.get() == *test02SIR.get());
}

TEST(SIRComparisonTest, DoubleFullChain) {
  /// Todo: this requires GTClang to be hoockable to dawn
  /// The goal is to read a generated file with two GTClangCompilers and compare the generated SIRs
  EXPECT_TRUE(false);
}

TEST(SIRComparisonTest, FullChainReference) {
  /// Todo: this requires GTClang to be hoockable to dawn
  /// The goal is to read a generated file and compare to the reference SIR generated by hand in
  /// memory
  EXPECT_TRUE(false);
}

TEST(SIRComparisonTest, DoubleReference) {
  std::unique_ptr<dawn::SIR> test01SIR = llvm::make_unique<dawn::SIR>();
  std::unique_ptr<dawn::SIR> test02SIR = llvm::make_unique<dawn::SIR>();

  // Genereate a stencil
  test01SIR->Stencils.resize(1);
  for(auto& a : test01SIR->Stencils) {
    a = std::make_shared<sir::Stencil>();
  }
  test02SIR->Stencils.resize(1);
  for(auto& a : test02SIR->Stencils) {
    a = std::make_shared<sir::Stencil>();
  }
  test01SIR->Stencils[0]->Name = "TestStencil01";
  test02SIR->Stencils[0]->Name = "TestStencil01";

  auto astptr =
      std::make_shared<dawn::AST>(std::make_shared<BlockStmt>(std::vector<std::shared_ptr<Stmt>>{
          std::make_shared<ExprStmt>(std::make_shared<VarAccessExpr>("foo"))}));
  test01SIR->Stencils[0]->StencilDescAst = astptr;
  test02SIR->Stencils[0]->StencilDescAst =
      std::make_shared<dawn::AST>(std::make_shared<BlockStmt>(std::vector<std::shared_ptr<Stmt>>{
          std::make_shared<ExprStmt>(std::make_shared<VarAccessExpr>("foo"))}));

  test01SIR->Stencils[0]->Fields.resize(1);
  test02SIR->Stencils[0]->Fields.resize(1);
  test01SIR->Stencils[0]->Fields[0] = std::make_shared<sir::Field>("foo");
  test02SIR->Stencils[0]->Fields[0] = std::make_shared<sir::Field>("foo");

  test01SIR->Stencils[0]->Attributes.set(dawn::sir::Attr::AttrKind::AK_MergeTemporaries);
  test02SIR->Stencils[0]->Attributes.set(dawn::sir::Attr::AttrKind::AK_MergeTemporaries);

  // Generate a stencil Function
  test01SIR->StencilFunctions.resize(1);
  for(auto& a : test01SIR->StencilFunctions) {
    a = std::make_shared<sir::StencilFunction>();
  }
  test02SIR->StencilFunctions.resize(1);
  for(auto& a : test02SIR->StencilFunctions) {
    a = std::make_shared<sir::StencilFunction>();
  }
  test01SIR->StencilFunctions[0]->Name = "TestStencilFunction01";
  test02SIR->StencilFunctions[0]->Name = "TestStencilFunction01";

  test01SIR->StencilFunctions[0]->Args.resize(1);
  test02SIR->StencilFunctions[0]->Args.resize(1);
  auto arg01 = std::make_shared<sir::StencilFunctionArg>();
  arg01->Name = "foo";
  arg01->Kind = sir::StencilFunctionArg::ArgumentKind::AK_Field;
  test01SIR->StencilFunctions[0]->Args[0] = arg01;
  test02SIR->StencilFunctions[0]->Args[0] = arg01;

  test01SIR->StencilFunctions[0]->Intervals.resize(1);
  test02SIR->StencilFunctions[0]->Intervals.resize(1);
  auto interval01 = std::make_shared<sir::Interval>(0, 1);
  test01SIR->StencilFunctions[0]->Intervals[0] = interval01;
  test02SIR->StencilFunctions[0]->Intervals[0] = interval01;

  test01SIR->StencilFunctions[0]->Asts.resize(1);
  test02SIR->StencilFunctions[0]->Asts.resize(1);
  auto ast01 = std::make_shared<dawn::AST>(std::make_shared<BlockStmt>(std::vector<std::shared_ptr<Stmt>>{
      std::make_shared<ExprStmt>(std::make_shared<VarAccessExpr>("foo"))}));
  test01SIR->StencilFunctions[0]->Asts[0] = ast01;
  test02SIR->StencilFunctions[0]->Asts[0] = ast01;

  test01SIR->StencilFunctions[0]->Attributes.set(dawn::sir::Attr::AttrKind::AK_MergeTemporaries);
  test02SIR->StencilFunctions[0]->Attributes.set(dawn::sir::Attr::AttrKind::AK_MergeTemporaries);

//  // Generate a global Variable Map
  test02SIR->GlobalVariableMap = std::make_shared<sir::GlobalVariableMap>();
  test01SIR->GlobalVariableMap = std::make_shared<sir::GlobalVariableMap>();
  auto val = std::make_shared<sir::Value>();
  val.get()->setType(sir::Value::TypeKind::Integer);
  val.get()->setValue(10);
  test01SIR->GlobalVariableMap->emplace("TestGlobal", val);
  test02SIR->GlobalVariableMap->emplace("TestGlobal", val);

  EXPECT_TRUE(*test01SIR.get() == *test02SIR.get());
}

} // anonymous namespace
